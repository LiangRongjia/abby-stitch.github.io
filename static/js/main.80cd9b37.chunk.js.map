{"version":3,"sources":["App/MyPoints/Header/Header.tsx","App/MyPoints/Semester/ClassItem/ClassItem.tsx","App/MyPoints/Semester/Semester.tsx","App/MyPoints/MyPointsAPI.ts","App/MyPoints/MyPoints.tsx","App/App.tsx","reportWebVitals.js","index.tsx"],"names":["Header","avgPoints","reload","checkNone","checkAll","className","alt","src","toFixed","onClick","ClassItem","name","credits","grades","points","checked","gradesList","setGrades","checkClassItem","selectRef","React","createRef","ref","onChange","current","value","map","item","type","Semester","semesterID","semesterName","classes","checkSemester","onlyCheckSemester","defaultData","semesters","defaultClassesState","getPoints","gradesName","parseInt","filter","join","MyPoints","useState","firstLoad","setFirstLoad","data","setData","classesState","setClassesState","classItem","semester","newGrades","fetch","then","response","json","newData","sort","a","b","sum","reduce","acc","cur","creditsSum","calcAvgPoints","window","location","ID","reverse","ButtonAppBar","appRef","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","register"],"mappings":"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","file":"static/js/main.80cd9b37.chunk.js","sourcesContent":["import './Header.css'\r\n\r\ninterface HeaderProps {\r\n  avgPoints: number,\r\n  reload: () => void,\r\n  checkNone: () => void,\r\n  checkAll: () => void\r\n}\r\n\r\nexport default function Header({ avgPoints, reload, checkNone, checkAll }: HeaderProps) {\r\n  return (\r\n    <header className=\"header\">\r\n      <img className=\"avatar\" alt=\"avatar\" src=\"./favicon.ico\" />\r\n      <h1>少爷的绩点</h1>\r\n      <p className=\"avg-points\">平均绩点：{avgPoints.toFixed(2)}</p>\r\n      <button className=\"ms-button\" onClick={reload}>刷新</button>\r\n      <button className=\"ms-button\" onClick={checkNone}>全部清除</button>\r\n      <button className=\"ms-button primary\" onClick={checkAll}>全部勾选</button>\r\n    </header>\r\n  )\r\n}","import React from 'react'\r\nimport './ClassItem.css'\r\n\r\ninterface ClassItemProps {\r\n  name: string,\r\n  credits: number,\r\n  grades: string,\r\n  points: number,\r\n  checked: boolean,\r\n  gradesList: string[],\r\n  setGrades: (name: string, newGrades: string) => void,\r\n  checkClassItem: (name: string) => void\r\n}\r\n\r\nexport default function ClassItem({\r\n  name,\r\n  credits,\r\n  grades,\r\n  points,\r\n  checked,\r\n  gradesList,\r\n  setGrades,\r\n  checkClassItem\r\n}: ClassItemProps) {\r\n  const selectRef = React.createRef<HTMLSelectElement>()\r\n  return (\r\n    <li className=\"class-list-item\">\r\n      <span className=\"class-name\">{name}</span>\r\n      <span className=\"class-credits\">{credits}</span>\r\n      <span className=\"class-grades\">\r\n        <select\r\n          ref={selectRef}\r\n          onChange={() => selectRef.current && setGrades(name, selectRef.current.value)}\r\n          value={grades}>\r\n          {\r\n            gradesList.map(item =>\r\n              <option key={item} value={item}>{item}</option>\r\n            )\r\n          }\r\n        </select>\r\n      </span>\r\n      <span className=\"class-points\">{points}</span>\r\n      <span className=\"class-checked\">\r\n        <input type=\"checkbox\"\r\n          onChange={() => (checkClassItem(name))}\r\n          checked={checked} />\r\n      </span>\r\n    </li>\r\n  )\r\n}","import './Semester.css'\r\nimport ClassItem from './ClassItem/ClassItem'\r\nimport { ClassItemStateType } from '../MyPoints'\r\n\r\ninterface SemesterProps {\r\n  semesterID: string,\r\n  semesterName: string,\r\n  classes: ClassItemStateType[],\r\n  gradesList: string[],\r\n  setGrades: (name: string, newGrades: string) => void,\r\n  checkSemester: (semesterID: string) => void,\r\n  onlyCheckSemester: (semesterID: string) => void,\r\n  checkClassItem: (name: string) => void\r\n}\r\nexport default function Semester({\r\n  semesterID,\r\n  semesterName,\r\n  classes,\r\n  gradesList,\r\n  setGrades,\r\n  checkSemester,\r\n  onlyCheckSemester,\r\n  checkClassItem\r\n}: SemesterProps) {\r\n  return (\r\n    <article className=\"semester\">\r\n      <header className=\"title-bar\">\r\n        <h2>{semesterName}</h2>\r\n        <button className=\"ms-button\"\r\n          onClick={() => checkSemester(semesterID)}>勾选学期</button>\r\n        <button className=\"ms-button primary\"\r\n          onClick={() => onlyCheckSemester(semesterID)}>仅本学期</button>\r\n      </header>\r\n      <div className=\"class-list-head\">\r\n        <span className=\"name-field\">课程</span>\r\n        <span className=\"credits-field\">学分</span>\r\n        <span className=\"grades-field\">等级</span>\r\n        <span className=\"points-field\">绩点</span>\r\n        <span className=\"checked-field\">勾选</span>\r\n      </div>\r\n      {\r\n        classes.map(item =>\r\n          <ClassItem\r\n            key={item.name}\r\n            name={item.name}\r\n            credits={item.credits}\r\n            grades={item.grades}\r\n            points={item.points}\r\n            checked={item.checked}\r\n            gradesList={gradesList}\r\n            setGrades={setGrades}\r\n            checkClassItem={checkClassItem} />\r\n        )\r\n      }\r\n    </article>\r\n  )\r\n}","const baseUrl = 'https://liangrongjia.github.io/abby-stitch.github.io/db'\r\n\r\nexport interface SemesterType {\r\n  ID: string,\r\n  name: string,\r\n  order: number\r\n}\r\nexport interface GradesType {\r\n  name: string,\r\n  points: number\r\n}\r\nexport interface ClassItemType {\r\n  semester: string,\r\n  grades: string,\r\n  credits: number,\r\n  name: string\r\n}\r\nexport interface DataStruct {\r\n  semesters: SemesterType[],\r\n  grades: GradesType[],\r\n  classes: ClassItemType[]\r\n}\r\n\r\nexport const fetchDB: () => Promise<DataStruct> = () => fetch(`${baseUrl}/my-points.json`).then(response => response.json())","import { useState } from 'react';\r\nimport Header from './Header/Header'\r\nimport Semester from './Semester/Semester'\r\nimport * as MyPointsAPI from './MyPointsAPI'\r\n\r\nimport './MyPoints.css'\r\n\r\nexport interface ClassItemStateType {\r\n  semester: string,\r\n  grades: string,\r\n  credits: number,\r\n  name: string,\r\n  points: number,\r\n  checked: boolean\r\n}\r\n\r\n/* 默认值 */\r\nconst defaultData: MyPointsAPI.DataStruct = { semesters: [], grades: [], classes: [] }\r\nconst defaultClassesState: ClassItemStateType[] = []\r\n\r\n/**\r\n * 根据 gradesName 获取 points\r\n */\r\nconst getPoints = (gradesName: string, grades: MyPointsAPI.GradesType[]) =>\r\n  parseInt(grades\r\n    .filter((item) => item.name === gradesName)\r\n    .map((item) => item.points)\r\n    .join(''))\r\n/**\r\n * 获取某 semester 下的所有 classItem\r\n */\r\nconst getClasses = (semesterID: string, classes: ClassItemStateType[]) => classes.filter(classItem => classItem.semester === semesterID) || defaultClassesState\r\n\r\nexport default function MyPoints() {\r\n  const [firstLoad, setFirstLoad] = useState(true)\r\n  const [data, setData] = useState(defaultData)\r\n  const [classesState, setClassesState] = useState(defaultClassesState)\r\n\r\n  const calcAvgPoints = () => {\r\n    const sum = classesState.reduce((acc, cur) => cur.checked ? acc + cur.credits * cur.points : acc, 0)\r\n    const creditsSum = classesState.reduce((acc, cur) => cur.checked ? acc + cur.credits : acc, 0)\r\n    const avgPoints = creditsSum === 0 ? 0 : (sum / creditsSum)\r\n    return avgPoints\r\n  }\r\n\r\n  const reload = () => window.location.reload()\r\n\r\n  const checkAll = () => setClassesState(\r\n    classesState.map(classItem => ({\r\n      ...classItem,\r\n      checked: true\r\n    }))\r\n  )\r\n\r\n  const checkNone = () => setClassesState(\r\n    classesState.map(classItem => ({\r\n      ...classItem,\r\n      checked: false\r\n    }))\r\n  )\r\n\r\n  const checkSemester = (semesterID: string) => setClassesState(\r\n    classesState.map(classItem => ({\r\n      ...classItem,\r\n      checked: classItem.semester === semesterID || classItem.checked\r\n    }))\r\n  )\r\n\r\n  const onlyCheckSemester = (semesterID: string) => setClassesState(\r\n    classesState.map((classItem) => ({\r\n      ...classItem,\r\n      checked: classItem.semester === semesterID\r\n    }))\r\n  )\r\n\r\n  const checkClassItem = (name: string) => setClassesState(\r\n    classesState.map(classItem =>\r\n      classItem.name === name ? {\r\n        ...classItem,\r\n        checked: !classItem.checked\r\n      } : classItem\r\n    )\r\n  )\r\n\r\n  const setGrades = (name: string, newGrades: string) => setClassesState(\r\n    classesState.map(classItem =>\r\n      classItem.name === name ? {\r\n        ...classItem,\r\n        grades: newGrades,\r\n        points: getPoints(newGrades, data.grades)\r\n      } : classItem))\r\n\r\n  if (firstLoad === true) {\r\n    setFirstLoad(false)\r\n    MyPointsAPI.fetchDB()\r\n      .then(newData => {\r\n        setData(newData)\r\n        setClassesState(\r\n          newData.classes\r\n            .map(item => ({\r\n              ...item,\r\n              points: getPoints(item.grades, newData.grades),\r\n              checked: true\r\n            }))\r\n            .sort((a, b) => b.points - a.points === 0 ? b.credits - a.credits : b.points - a.points)\r\n        )\r\n      })\r\n  }\r\n\r\n  return (\r\n    <main className='my-points'>\r\n      <Header\r\n        avgPoints={calcAvgPoints()}\r\n        reload={reload}\r\n        checkAll={checkAll}\r\n        checkNone={checkNone} />\r\n      {data.semesters.map(semester =>\r\n        <Semester\r\n          key={semester.ID}\r\n          semesterID={semester.ID}\r\n          semesterName={semester.name}\r\n          classes={getClasses(semester.ID, classesState)}\r\n          gradesList={data.grades.map(item => item.name)}\r\n          setGrades={setGrades}\r\n          checkSemester={checkSemester}\r\n          onlyCheckSemester={onlyCheckSemester}\r\n          checkClassItem={checkClassItem} />\r\n      ).reverse()}\r\n    </main>\r\n  )\r\n}","import React from 'react';\r\nimport './App.css'\r\nimport MyPoints from './MyPoints/MyPoints'\r\n\r\nexport default function ButtonAppBar() {\r\n  const appRef = React.createRef<HTMLDivElement>()\r\n\r\n  // const toggleFullScreen = () => {\r\n  //   document.fullscreenElement ? document.exitFullscreen() : appRef.current.requestFullscreen()    \r\n  // }\r\n\r\n  return (\r\n    <div ref={appRef} className='app'>\r\n      <MyPoints />\r\n    </div>\r\n  );\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n\r\nif ('serviceWorker' in navigator) {\r\n  navigator.serviceWorker.register('sw.js');\r\n}\r\n\r\n"],"sourceRoot":""}