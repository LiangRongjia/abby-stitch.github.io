{"version":3,"sources":["App/MyPoints/Header/Header.tsx","App/MyPoints/Semester/ClassItem/ClassItem.tsx","App/MyPoints/Semester/Semester.tsx","App/MyPoints/MyPointsAPI.ts","App/MyPoints/MyPoints.tsx","App/App.tsx","reportWebVitals.js","index.tsx"],"names":["Header","avgPoints","reload","checkNone","checkAll","className","alt","src","toFixed","onClick","ClassItem","name","credits","grades","points","checked","gradesList","setGrades","checkClassItem","selectRef","React","createRef","ref","onChange","current","value","map","item","type","Semester","semesterID","semesterName","classes","checkSemester","onlyCheckSemester","defaultClassesState","defaultGrades","defaultSemesterState","getPoints","gradesName","parseInt","filter","join","calcAvgPoints","sum","reduce","acc","cur","creditsSum","useMyPoints","useState","fetchToggle","classesState","setClassesState","setGradesList","semesters","setSemesters","eventsHandle","window","location","classItem","semester","newGrades","useEffect","fetch","then","response","json","newData","sort","a","b","ID","reverse","MyPoints","id","ButtonAppBar","appRef","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","register"],"mappings":"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","file":"static/js/main.4b10bafb.chunk.js","sourcesContent":["import './Header.css'\r\n\r\ninterface HeaderProps {\r\n  avgPoints: number,\r\n  reload: () => void,\r\n  checkNone: () => void,\r\n  checkAll: () => void\r\n}\r\n\r\nexport default function Header({ avgPoints, reload, checkNone, checkAll }: HeaderProps) {\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"header-container\">\r\n        <img className=\"avatar\" alt=\"avatar\" src=\"./favicon.ico\" />\r\n        <h1>少爷的绩点</h1>\r\n        <p className=\"avg-points\">平均绩点：{avgPoints.toFixed(2)}</p>\r\n        <button className=\"ms-button\" onClick={reload}>刷新</button>\r\n        <button className=\"ms-button\" onClick={checkNone}>全部清除</button>\r\n        <button className=\"ms-button primary\" onClick={checkAll}>全部勾选</button>\r\n      </div>\r\n    </header>\r\n  )\r\n}","import React from 'react'\r\nimport './ClassItem.css'\r\n\r\ninterface ClassItemProps {\r\n  name: string,\r\n  credits: number,\r\n  grades: string,\r\n  points: number,\r\n  checked: boolean,\r\n  gradesList: string[],\r\n  setGrades: (name: string, newGrades: string) => void,\r\n  checkClassItem: (name: string) => void\r\n}\r\n\r\nexport default function ClassItem({\r\n  name,\r\n  credits,\r\n  grades,\r\n  points,\r\n  checked,\r\n  gradesList,\r\n  setGrades,\r\n  checkClassItem\r\n}: ClassItemProps) {\r\n  const selectRef = React.createRef<HTMLSelectElement>()\r\n  return (\r\n    <li className=\"class-list-item\">\r\n      <span className=\"class-name\">{name}</span>\r\n      <span className=\"class-credits\">{credits}</span>\r\n      <span className=\"class-grades\">\r\n        <select\r\n          ref={selectRef}\r\n          onChange={() => selectRef.current && setGrades(name, selectRef.current.value)}\r\n          value={grades}>\r\n          {\r\n            gradesList.map(item =>\r\n              <option key={item} value={item}>{item}</option>\r\n            )\r\n          }\r\n        </select>\r\n      </span>\r\n      <span className=\"class-points\">{points}</span>\r\n      <span className=\"class-checked\">\r\n        <input type=\"checkbox\"\r\n          onChange={() => (checkClassItem(name))}\r\n          checked={checked} />\r\n      </span>\r\n    </li>\r\n  )\r\n}","import './Semester.css'\r\nimport ClassItem from './ClassItem/ClassItem'\r\nimport { ClassItemStateType } from '../MyPoints'\r\n\r\ninterface SemesterProps {\r\n  semesterID: string,\r\n  semesterName: string,\r\n  classes: ClassItemStateType[],\r\n  gradesList: string[],\r\n  setGrades: (name: string, newGrades: string) => void,\r\n  checkSemester: (semesterID: string) => void,\r\n  onlyCheckSemester: (semesterID: string) => void,\r\n  checkClassItem: (name: string) => void\r\n}\r\nexport default function Semester({\r\n  semesterID,\r\n  semesterName,\r\n  classes,\r\n  gradesList,\r\n  setGrades,\r\n  checkSemester,\r\n  onlyCheckSemester,\r\n  checkClassItem\r\n}: SemesterProps) {\r\n  return (\r\n    <article className=\"semester\">\r\n      <header className=\"title-bar\">\r\n        <h2>{semesterName}</h2>\r\n        <button className=\"ms-button\"\r\n          onClick={() => checkSemester(semesterID)}>勾选学期</button>\r\n        <button className=\"ms-button primary\"\r\n          onClick={() => onlyCheckSemester(semesterID)}>仅本学期</button>\r\n      </header>\r\n      <div className=\"class-list-head\">\r\n        <span className=\"name-field\">课程</span>\r\n        <span className=\"credits-field\">学分</span>\r\n        <span className=\"grades-field\">等级</span>\r\n        <span className=\"points-field\">绩点</span>\r\n        <span className=\"checked-field\">勾选</span>\r\n      </div>\r\n      {\r\n        classes.map(item =>\r\n          <ClassItem\r\n            key={item.name}\r\n            name={item.name}\r\n            credits={item.credits}\r\n            grades={item.grades}\r\n            points={item.points}\r\n            checked={item.checked}\r\n            gradesList={gradesList}\r\n            setGrades={setGrades}\r\n            checkClassItem={checkClassItem} />\r\n        )\r\n      }\r\n    </article>\r\n  )\r\n}","const baseUrl = 'https://liangrongjia.github.io/abby-stitch.github.io/db'\r\n\r\nexport interface SemesterType {\r\n  ID: string,\r\n  name: string,\r\n  order: number\r\n}\r\nexport interface GradesType {\r\n  name: string,\r\n  points: number\r\n}\r\nexport interface ClassItemType {\r\n  semester: string,\r\n  grades: string,\r\n  credits: number,\r\n  name: string\r\n}\r\nexport interface DataStruct {\r\n  semesters: SemesterType[],\r\n  grades: GradesType[],\r\n  classes: ClassItemType[]\r\n}\r\n\r\nexport const fetchDB: () => Promise<DataStruct> = () => fetch(`${baseUrl}/my-points.json`).then(response => response.json())","import { useState, useEffect } from 'react';\r\nimport Header from './Header/Header'\r\nimport Semester from './Semester/Semester'\r\nimport * as MyPointsAPI from './MyPointsAPI'\r\n\r\nimport './MyPoints.css'\r\n\r\nexport interface ClassItemStateType {\r\n  semester: string,\r\n  grades: string,\r\n  credits: number,\r\n  name: string,\r\n  points: number,\r\n  checked: boolean\r\n}\r\n\r\nconst defaultClassesState: ClassItemStateType[] = []\r\nconst defaultGrades: MyPointsAPI.GradesType[] = []\r\nconst defaultSemesterState: MyPointsAPI.SemesterType[] = []\r\n\r\nconst getPoints = (gradesName: string, grades: MyPointsAPI.GradesType[]) =>\r\n  parseInt(grades.filter((item) => item.name === gradesName)\r\n    .map((item) => item.points)\r\n    .join('')\r\n  )\r\n\r\nconst getClasses = (semesterID: string, classes: ClassItemStateType[]) => classes.filter(classItem => classItem.semester === semesterID) || defaultClassesState\r\n\r\nconst calcAvgPoints = (classes: ClassItemStateType[]) => {\r\n  const sum = classes.reduce((acc, cur) => cur.checked ? acc + cur.credits * cur.points : acc, 0)\r\n  const creditsSum = classes.reduce((acc, cur) => cur.checked ? acc + cur.credits : acc, 0)\r\n  const avgPoints = creditsSum === 0 ? 0 : (sum / creditsSum)\r\n  return avgPoints\r\n}\r\n\r\nconst useMyPoints = () => {\r\n  const [fetchToggle] = useState(true)\r\n  const [classesState, setClassesState] = useState(defaultClassesState)\r\n  const [gradesList, setGradesList] = useState(defaultGrades)\r\n  const [semesters, setSemesters] = useState(defaultSemesterState)\r\n\r\n  const eventsHandle = {\r\n    reload: () => window.location.reload(),\r\n    checkAll: () => setClassesState(\r\n      classesState.map(classItem => ({\r\n        ...classItem,\r\n        checked: true\r\n      }))\r\n    ),\r\n    checkNone: () => setClassesState(\r\n      classesState.map(classItem => ({\r\n        ...classItem,\r\n        checked: false\r\n      }))\r\n    ),\r\n    checkSemester: (semesterID: string) => setClassesState(\r\n      classesState.map(classItem => ({\r\n        ...classItem,\r\n        checked: classItem.semester === semesterID || classItem.checked\r\n      }))\r\n    ),\r\n    onlyCheckSemester: (semesterID: string) => setClassesState(\r\n      classesState.map((classItem) => ({\r\n        ...classItem,\r\n        checked: classItem.semester === semesterID\r\n      }))\r\n    ),\r\n    checkClassItem: (name: string) => setClassesState(\r\n      classesState.map(classItem => classItem.name === name ? {\r\n        ...classItem,\r\n        checked: !classItem.checked\r\n      } : classItem)\r\n    ),\r\n    setGrades: (name: string, newGrades: string) => setClassesState(\r\n      classesState.map(classItem =>\r\n        classItem.name === name ? {\r\n          ...classItem,\r\n          grades: newGrades,\r\n          points: getPoints(newGrades, gradesList)\r\n        } : classItem\r\n      )\r\n    )\r\n  }\r\n\r\n  useEffect(() => {\r\n    MyPointsAPI.fetchDB().then(newData => {\r\n      setGradesList(newData.grades)\r\n      setSemesters(newData.semesters)\r\n      setClassesState(newData.classes.map(item => ({\r\n        ...item,\r\n        points: getPoints(item.grades, newData.grades),\r\n        checked: true\r\n      }))\r\n        .sort((a, b) => b.points - a.points === 0 ? b.credits - a.credits : b.points - a.points)\r\n      )\r\n    })\r\n  }, [fetchToggle])\r\n\r\n  return {\r\n    avgPoints: calcAvgPoints(classesState),\r\n    gradesList: gradesList.map(item => item.name),\r\n    semesters: semesters.map(semester => ({\r\n      ID: semester.ID,\r\n      name: semester.name,\r\n      classes: getClasses(semester.ID, classesState)\r\n    })).reverse(),\r\n    reload: eventsHandle.reload,\r\n    checkAll: eventsHandle.checkAll,\r\n    checkNone: eventsHandle.checkNone,\r\n    setGrades: eventsHandle.setGrades,\r\n    checkSemester: eventsHandle.checkSemester,\r\n    onlyCheckSemester: eventsHandle.onlyCheckSemester,\r\n    checkClassItem: eventsHandle.checkClassItem\r\n  }\r\n}\r\n\r\nexport default function MyPoints() {\r\n  const {\r\n    avgPoints,\r\n    semesters,\r\n    gradesList,\r\n    reload,\r\n    checkAll,\r\n    checkNone,\r\n    setGrades,\r\n    checkSemester,\r\n    onlyCheckSemester,\r\n    checkClassItem\r\n  } = useMyPoints()\r\n\r\n  return (\r\n    <div id='my-points'>\r\n      <Header\r\n        avgPoints={avgPoints}\r\n        reload={reload}\r\n        checkAll={checkAll}\r\n        checkNone={checkNone}\r\n      />\r\n      <main>\r\n        {\r\n          semesters.map(semester =>\r\n            <Semester\r\n              key={semester.ID}\r\n              semesterID={semester.ID}\r\n              semesterName={semester.name}\r\n              classes={semester.classes}\r\n              gradesList={gradesList}\r\n              setGrades={setGrades}\r\n              checkSemester={checkSemester}\r\n              onlyCheckSemester={onlyCheckSemester}\r\n              checkClassItem={checkClassItem}\r\n            />\r\n          )\r\n        }\r\n      </main>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport './App.css'\r\nimport MyPoints from './MyPoints/MyPoints'\r\n\r\nexport default function ButtonAppBar() {\r\n  const appRef = React.createRef<HTMLDivElement>()\r\n\r\n  // const toggleFullScreen = () => {\r\n  //   document.fullscreenElement ? document.exitFullscreen() : appRef.current.requestFullscreen()    \r\n  // }\r\n\r\n  return (\r\n    <div ref={appRef} className='app'>\r\n      <MyPoints />\r\n    </div>\r\n  );\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n\r\nif ('serviceWorker' in navigator) {\r\n  navigator.serviceWorker.register('sw.js');\r\n}\r\n\r\n"],"sourceRoot":""}